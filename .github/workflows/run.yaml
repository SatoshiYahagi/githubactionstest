# test work file

#  GitHub リポジトリの Actions ページで表示されるワークフローの名前
name: learn-github-actions

# トリガーアクション（対象ブランチ指定はなし）
on: [push]

env:
  # ビルドサーバでビルドに使用する Unity.exe の格納パス
  BUILD_SERVER_UNITY_PATH: /Applications/Unity/2021.2.17f1
  # ビルドサーバでビルド対象となるプロジェクトのパス
  BUILD_SERVER_PROJECT_PATH: '"/Users/unity-build/project/GithubActionsBuildProto/GitHubActionsTest/My project"'
  # ビルドファイルが格納される一時フォルダの名前
  BUILD_FILE_INCLUDE_FOLDER: BuildFiles
  # アップロード先の GoogleDriveフォルダパス
  GOOGLE_DRIVE_UPLOAD_FOLDER: path/to
  # ビルドサーバで実行する rclone コマンドにて使用する設定の名前
  # https://rclone.org/drive/#standard-options
  RCLONE_USE_CONFIGURE_NAME: gdrive

jobs:
# ジョブの名前
  build:
    # セルフホストランナーで実行
    runs-on: self-hosted
    steps:
       - name: Checkout
         uses: actions/checkout@v3
         # リポジトリのチェックアウト時にLibraryフォルダ等を消さないよう「clean: false」
         # Git LFSを使用している場合は 「lfs: true」が必要
         with:
           fetch-depth: 0
           lfs: true
           clean: false
       
       - name: Build
         shell: bash
         # BashSellスクリプト形式で定義
         run: |
           cd ${{ env.BUILD_SERVER_PROJECT_PATH }}
           
           # 最新の状態をプル
           git pull

           # 1 つのセルフホスト ランナーは、一度に 1 つのジョブしか実行できません。
           # 使用可能なランナーがアイドル状態でない場合、後続のジョブは、使用可能なランナーがアイドル状態になるまでキューに入れられます。
           # 同じマシンに複数のランナーを置きたい場合は、異なるユーザーで実行できます。
           #  https://github.com/orgs/community/discussions/26769
           #
           # 要：ビルドサーバでのUnityライセンス認証
           #
           ${{ env.BUILD_SERVER_UNITY_PATH }}/Unity.app/Contents/MacOS/Unity -quit -batchmode -nographics -projectPath ${{ env.BUILD_SERVER_PROJECT_PATH }} -executeMethod Builder.BuildAndroid Android
           
           # ビルドしたapkファイル名を取得（格納フォルダ内の最新1件のみを取得）
           BUILD_FILE_NAME=`ls -rt ./${{ env.BUILD_FILE_INCLUDE_FOLDER }}/*.apk | tail -n 1 | sed -E "s/^.*\\/([^\\/]*\\.apk)$/\\1/"`
       
           # ビルド結果のアップロード
           rclone --drive-shared-with-me copy "./${{ env.BUILD_FILE_INCLUDE_FOLDER }}/${BUILD_FILE_NAME}" ${{ env.RCLONE_USE_CONFIGURE_NAME }}:${{ env.GOOGLE_DRIVE_UPLOAD_FOLDER }}
           
           # アップロードファイルのJson情報からIDを取得
           GOOGLE_DRIVE_ID=`rclone lsjson ${{ env.RCLONE_USE_CONFIGURE_NAME }}:"${{ env.GOOGLE_DRIVE_UPLOAD_FOLDER }}/${BUILD_FILE_NAME}" | sed -E "s/.*\\"ID\\":\\"(.+)\\"\\}.*/\\1/"`
           
           #
           echo ${GOOGLE_DRIVE_ID} 
           
           # ビルドファイル格納フォルダを削除
           #rm -rf ./${{ env.BUILD_FILE_INCLUDE_FOLDER }}
       

#  upload:
#    # 最新のubuntuで実行？
#    runs-on: ubuntu-latest
#    needs: build
#    steps:
#       # Google Driveにアップロードするファイルが入るディレクトリ作成
#       - run: |
#           mkdir upload
#           find . -name "*.pdf" | xargs -I{} sh -c 'mkdir -p $(dirname {}); cp "{}" $(dirname "upload/{}")'
#
#       # テスト用ファイルを作成ディレクトリに配置
#       - name: Upload file create
#         id: file_create
#         run: echo "branch=$(echo upload_test. > upload/UploadTest.txt)" >> $GITHUB_OUTPUT
#       # set-output は非推奨え廃止予定のため書き換え
#       # run: echo "##[set-output name=branch;]$(echo upload_test. > upload/UploadTest.txt)"
#
#       # Google Drive へのアップロード
#       - name: Upload to Google Drive
#         uses: satackey/action-google-drive@v1
#         with:
#           skicka-tokencache-json: ${{ secrets.SKICKA_TOKENCACHE_JSON }}
#           upload-from: ./upload
#           upload-to: /path/to
#         # For those who set up Google Drive API client ID and secret themselves
#           google-client-id: ${{ secrets.GOOGLE_CLIENT_ID }}
#           google-client-secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
#
# Google Drive からのダウンロード
#       - name: Download from Google Drive
#         uses: satackey/action-google-drive@v1
#         with:
#           skicka-tokencache-json: ${{ secrets.SKICKA_TOKENCACHE_JSON }}
#           download-from: /path/to/download
#           download-to: ./
#
# For those who set up Google Drive API client ID and secret themselves
#           google-client-id: ${{ secrets.GOOGLE_CLIENT_ID }}
#           google-client-secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}